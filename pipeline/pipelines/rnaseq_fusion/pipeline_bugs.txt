
log in this directory gets written to sometimes, it seems. 
/hpf/largeprojects/ccmbio/jiangyue/tools/FusionMap/FusionMap_2015-03-31/CommandJobs/r1a-21/2018.10.3
For example, in this error file: /hpf/largeprojects/ccmbio/mapostolides/validate_fusion/stjude_validation/stjude_output_Oct3_2018/job_output/fusionmap/fusionmap.SJHGG026_D_2018-10-03T16.36.59.o
Error occurred from JobRunner.RunJob. Error message=Access to the path "/hpf/largeprojects/ccmbio/jiangyue/tools/FusionMap/FusionMap_2015-03-31/CommandJobs/r1a-21/2018.10.3" is denied.@@@
The following file uses the fusionmap tool located in Yue's repository
/hpf/largeprojects/ccmbio/mapostolides/gene_fusion/pipeline/bfx/fusionmap.py

Problem:
The error is that when a user first uses a node on hpf, a directory corresponding to that node is created in /hpf/largeprojects/ccmbio/jiangyue/tools/FusionMap/FusionMap_2015-03-31/CommandJobs, and ownership of that directory is given to the user who ran the job. Subsequently, when another user submits a fusionmap job that is scheduled to that node, the job will fail because a directory already exists for that node, and the user does not have write permissions to generate files within it.

Possible Solution: Change the write permissions to g+w for all these /hpf/largeprojects/ccmbio/jiangyue/tools/FusionMap/FusionMap_2015-03-31/CommandJobs/<node_id> directories. This way, even though Fusionmap generates a directory without group write permissions, this will be changed such that all users within the ccm group are allowed to write to the directory
Add a script to the pipeline to automatically change the file permissions of all files in /hpf/largeprojects/ccmbio/jiangyue/tools/FusionMap/FusionMap_2015-03-31/CommandJobs.
Script will throw errors because there are other directories in the CommandJobs directory which are not owned by the user who is running the pipeline, but this will not affect the running of the script.

*************
Oct 11, 2018:
*************

The following fusions are not being clustered together by the pipeline, but should, since their coordinates are the same. Therefore, the assigned genes should be the same, but aren't :


These fusions are from the final output file of the pipeline, after the bwafilter step, in the .cluster file format:

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
cluster_type    gene1   gene2  max_split_cnt max_span_cnt sample_type disease tools inferred_fusion_type gene1_on_bnd gene1_close_to_bnd  gene2_on_bnd gene2_close_to_bnd dna_supp  samples chr1 breakpoint_1 chr2 breakpoint_2
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Gene_Cluster    HES1    IFNL1   43      41      Tumor   VALIDATION      integrate,defuse,ericscript     GeneFusion      True    True    True    True    -1      smc_rna_sim45   chr3    193854837       chr19   39787445
BP_Cluster      HES1    NA      20      -1      Tumor   VALIDATION      fusionmap       TruncatedCoding True    True    False   False   -1      smc_rna_sim45   chr3    193854837       chr19   39787445
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

The above true positive fusions were detected from the smc_rna_sim45 data, from the Montreal group located here:
/hpf/largeprojects/ccmbio/mapostolides/validate_fusion/montreal_benchmark_validation/

The validation was run using validation script, using breakpoints. The below script is simply a wrapper, which calls a validation script :

/hpf/largeprojects/ccmbio/mapostolides/validate_fusion/montreal_benchmark_validation/validate_fusions/run-validation.sh

Run as follows:

./run-validation.sh sim45_validated_fusions_infofile.tsv smc_rna_sim45.bwafilter.cluster


The "-1" value for the second true positive fusion above represents the max_span_cnt, which means fusionmap detects NO spanning reads for this fusion, but there are 20 split reads.
The .cff file is "upstream" of the .cluster file in the workflow
/hpf/largeprojects/ccmbio/mapostolides/validate_fusion/montreal_benchmark_validation/smc_rna_sim45/outputOct5/fusions/cff/merged.cff

The cff format (the predecessor to .cluster format) has columns as follows:


The 4 fusion callers have the following data in the above .cff file:

ORIGINAL_CFF_FILE
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
chr1	pos1	strand1	chr2	pos2	strand2	library	sample_name	sample_type	disease	tool	split_cnt	span_cnt	t_gene1	t_area1	t_gene2	t_area2	
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3       193854837       +       19      39787445        -       RNA     smc_rna_sim45   Tumor   VALIDATION      defuse  43      28      HES1    coding  IL29    coding
3       193854837       NA      19      39787445        NA      RNA     smc_rna_sim45   Tumor   VALIDATION      fusionmap       20      -1      HES1    NA      IL29    NA
3       193854837       NA      19      39787445        NA      RNA     smc_rna_sim45   Tumor   VALIDATION      ericscript      35      41      HES1    NA      IFNL1   NA
3       193854836       NA      19      39787444        NA      RNA     smc_rna_sim45   Tumor   VALIDATION      integrate       22      16      HES1    NA      IFNL1   NA
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

For some reason, fusionmap is not being grouped together with the other fusion callers, and I think it might be due to fact that ( max_span_cnt = -1 ) for fusionmap. I will look further into how the pipeline code functions to confirm whether this is the case  

In /hpf/largeprojects/ccmbio/mapostolides/validate_fusion/montreal_benchmark_validation/smc_rna_sim45/outputOct5/fusions/cff/merged.cff.reann, downstream of merged.cff,
the 4 fusion callers have the following data:

REANNOTATED_FILE
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
chr1	pos1	strand1	chr2	pos2	strand2	library	sample_name	sample_type	disease	tool	split_cnt	span_cnt	t_gene1	t_area1	t_gene2	t_area2	category	reann_gene1	reann_type1	reann_gene2	reann_type2	gene1_on_bndry	gene1_close_to_bndry	gene2_on_bndry	gene2_close_to_bndry	score	coding_id_distance	gene_interval_distance	dnasupp	fusion_id	seq1	seq2	is_inframe	splice_site1	splice_site2		
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
chr3    193854837       +       chr19   39787445        -       RNA     smc_rna_sim45   Tumor   VALIDATION      defuse  43      28      HES1    coding  IL29    coding  GeneFusion      HES1    cds     IFNL1   cds     True    True    True    True    6       2094    0       -9      F00000135       TACTCTATGCAGAGCTCGCGGCATTCCAAGCTGGAGAAGGCGGACATTCTGGAAATGACAGTGAAGCACCTCCGGAACCTGCAGCGGGCGCAGATGACGG    GAAGAGTCACTCAAGCTGAAAAACTGGAGTTGCAGCTCTCCTGTCTTCCCCGGGAATTGGGACCTGAGGCTTCTCCAGGTGAGCTGAAAGTCAGGCCCCC    False   GT      AG

chr3    193854837       +       chr19   39787445        +       RNA     smc_rna_sim45   Tumor   VALIDATION      fusionmap       20      -1      HES1    NA      IL29    NA      TruncatedCoding HES1    cds     NA      NA      True    True    NA      NA      3       -1      0       -9      F00000167       TACTCTATGCAGAGCTCGCGGCATTCCAAGCTGGAGAAGGCGGACATTCTGGAAATGACAGTGAAGCACCTCCGGAACCTGCAGCGGGCGCAGATGACGG    CCTAGAGAGCAAGGGCAGGGGTTAGCCCACAGCAGGATGGCTGGAAGCTAGCTCATAGCAGCAAGGATGAAGTTGGCCTGACAGCATGGGTTTAACCCAG    False   GT      TT

chr3    193854837       +       chr19   39787445        -       RNA     smc_rna_sim45   Tumor   VALIDATION      ericscript      35      41      HES1    NA      IFNL1   NA      GeneFusion      HES1    cds     IFNL1   cds     True    True    True    True    6       2094    0       -9      F00000226       TACTCTATGCAGAGCTCGCGGCATTCCAAGCTGGAGAAGGCGGACATTCTGGAAATGACAGTGAAGCACCTCCGGAACCTGCAGCGGGCGCAGATGACGG    GAAGAGTCACTCAAGCTGAAAAACTGGAGTTGCAGCTCTCCTGTCTTCCCCGGGAATTGGGACCTGAGGCTTCTCCAGGTGAGCTGAAAGTCAGGCCCCC    False   GT      AG

chr3    193854837       +       chr19   39787445        -       RNA     smc_rna_sim45   Tumor   VALIDATION      integrate       22      16      HES1    NA      IFNL1   NA      GeneFusion      HES1    cds     IFNL1   cds     True    True    True    True    6       2094    0       -9      F00000341       TACTCTATGCAGAGCTCGCGGCATTCCAAGCTGGAGAAGGCGGACATTCTGGAAATGACAGTGAAGCACCTCCGGAACCTGCAGCGGGCGCAGATGACGG    GAAGAGTCACTCAAGCTGAAAAACTGGAGTTGCAGCTCTCCTGTCTTCCCCGGGAATTGGGACCTGAGGCTTCTCCAGGTGAGCTGAAAGTCAGGCCCCC    False   GT      AG
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

It seems that during the reannotation step of the pipeline, the fusion, as detected by fusionmap, is being miscategorized as TruncatedCoding instead of GeneFusion. Why??

Annotation step uses GeneAnnotation class from pygeneann.py:

gene_ann = pygeneann.GeneAnnotation(args.ensbed) (this is a line of code from reann_cff_fusion.py)

-ensbed file is a file specified as an argument to the reann_cff_fusion.py script of fusiontools. The ensbed file is specifified in the configuration file of the pipeline:
annotation_file=/hpf/largeprojects/ccmbio/mapostolides/gene_fusion/pipeline/config_reference_files/ens_known_genes.bed

This annotation file contains feature information, including start and endpoints, for all known genes in the human genome, hg19 reference

Ran...
 
./reann_cff_fusion.py fusionmap.cff ens_known_genes.bed human_g1k_v37_decoy.fasta 

...with testing files in directory /hpf/largeprojects/ccmbio/mapostolides/mugqic_tools-my-version/python-tools/fusiontools/0.1.0/bin/reann_cff_fusion_testing/

Successfully used the fusionmap called fusion from merged.cff and reproduced results in merged.cff.reann for that same fusion (i.e. HES1-IL29 )

1)

i.e. this:
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3       193854837       NA      19      39787445        NA      RNA     smc_rna_sim45   Tumor   VALIDATION      fusionmap       20      -1      HES1    NA      IL29    NA
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
became this:
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
chr3    193854837       +       chr19   39787445        +       RNA     smc_rna_sim45   Tumor   VALIDATION      fusionmap       20      -1      HES1    NA      IL29    NA      TruncatedCoding HES1    cds     NA      NA      True    True    NA      NA      3       -1      0       -9      F00000167       TACTCTATGCAGAGCTCGCGGCATTCCAAGCTGGAGAAGGCGGACATTCTGGAAATGACAGTGAAGCACCTCCGGAACCTGCAGCGGGCGCAGATGACGG    CCTAGAGAGCAAGGGCAGGGGTTAGCCCACAGCAGGATGGCTGGAAGCTAGCTCATAGCAGCAAGGATGAAGTTGGCCTGACAGCATGGGTTTAACCCAG    False   GT      TT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2)

Then, tried changing the values of the fusion in the following way:

fusionmap-mod1.cff
3       193854837       NA      19      39787445        NA      RNA     smc_rna_sim45   Tumor   VALIDATION      fusionmap       20      10(-1)      HES1    NA      IL29    NA

Despite changing the span_cnt being changed to a non-negative value, there was no difference in reannotation output for this fusion

3)

Original ericscript .cff fusion was reannotated manually to confirm that it is annotated correctly when running it alone

When run manually, ericscript fusion from ORIGINAL_CFF_FILE is reproduced to be identical to reannotated fusion in REANNOTATED_FILE

4) Note: strand1/strand2 = +/+ for fusionmap and +/- for all others. Why is this?

Note that the Fusionmap fusion caller incorrectly names the 3' gene. Why is this?

5) Changed  IL29 -->IFNL1  in fusionmap-mod2.cff

This change caused the fusion to be correctly categorized. The following input -> output was seen:
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3       193854837       NA      19      39787445        NA      RNA     smc_rna_sim45   Tumor   VALIDATION      fusionmap       20      -1      HES1    NA      IFNL1    NA
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
chr3    193854837       +       chr19   39787445        -       RNA     smc_rna_sim45   Tumor   VALIDATION      fusionmap       20      -1      HES1    NA      IFNL1   NA      GeneFusion      HES1    cds     IFNL1     cds     True    True    True    True    6       2094    0       -9      F00000001       TACTCTATGCAGAGCTCGCGGCATTCCAAGCTGGAGAAGGCGGACATTCTGGAAATGACAGTGAAGCACCTCCGGAACCTGCAGCGGGCGCAGATGACGG    GAAGAGTCACTCAAGCTGAAAAACTGGAGTTGCAGCTCTCCTGTCTTCCCCGGGAATTGGGACCTGAGGCTTCTCCAGGTGAGCTGAAAGTCAGGCCCCC      False   GT      AG 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

6) However, defuse also has its 3' gene incorrectly named in the ORIGINAL_CFF_FILE. Why is defuse being categorized correctly, while fusionmap is not? In theory, the reannotation script should be able to use breakpoints alone to reannotate, and successful reannotation should not depend on gene names. 

To confirm that defuse is reannotated correctly, the following I/O is seen:

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3       193854837       +       19      39787445        -       RNA     smc_rna_sim45   Tumor   VALIDATION      defuse  43      28      HES1    coding  IL29    coding
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
chr3    193854837       +       chr19   39787445        -       RNA     smc_rna_sim45   Tumor   VALIDATION      defuse  43      28      HES1    coding  IL29    coding  GeneFusion      HES1    cds     IFNL1   cds       True    True    True    True    6       2094    0       -9      F00000001       TACTCTATGCAGAGCTCGCGGCATTCCAAGCTGGAGAAGGCGGACATTCTGGAAATGACAGTGAAGCACCTCCGGAACCTGCAGCGGGCGCAGATGACGG    GAAGAGTCACTCAAGCTGAAAAACTGGAGTTGCAGCTCTCCTGTCTTCCCCGGGAATTGGGACCTGAGGCTTCTCCAGGTGAGCTGAAAGTCAGGCCCCC      False   GT      AG
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

As seen above, despite the incorrectly named 3' gene name, the defuse fusion is categorized correctly as a GeneFusion

7) Will changing defuse fusion of ORIGINAL_CFF_FILE from strand1/strand2 from +/- -> NA/NA cause the defuse fusion to be incorrectly categorized?

defuse-mod1.cff 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3       193854837       NA       19      39787445        NA       RNA     smc_rna_sim45   Tumor   VALIDATION      defuse  43      28      HES1    coding  IL29    coding
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
chr3    193854837       +       chr19   39787445        +       RNA     smc_rna_sim45   Tumor   VALIDATION      defuse  43      28      HES1    coding  IL29    coding  TruncatedCoding HES1    cds     NA      NATrue    True    NA      NA      3       -1      0       -9      F00000001       TACTCTATGCAGAGCTCGCGGCATTCCAAGCTGGAGAAGGCGGACATTCTGGAAATGACAGTGAAGCACCTCCGGAACCTGCAGCGGGCGCAGATGACGG    CCTAGAGAGCAAGGGCAGGGGTTAGCCCACAGCAGGATGGCTGGAAGCTAGCTCATAGCAGCAAGGATGAAGTTGGCCTGACAGCATGGGTTTAACCCAG      False   GT      TT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Indeed, it seems like the combination of NA/NA for strand1/strand2 and an incorrectly named 3' gene results in incorrect categorization for defuse as well. This is a clear bug in the reannotation script, which should be able to categorize based on breakpoints alone
Note: strand1/strand2 has also been incorrectly changed to +/+. Why?


8) Does defuse fusion caller output +/- strand information, while fusionmap does not?

In the file results.filtered.tsv, which is the raw output of the defuse fusion caller, the columns (gene_align_strand1, gene_align_strand2) correspond to the strand information

int the file 02_RNA.FusionReport.txt, which is the raw output of the fusionmap fusion caller, there are no columns corresponding to strand information. However, this information should be able to be assigned using the ens_known_genes.bed file 


*************
Oct 18, 2018:
*************

For the deFuse fusion caller, It is unclear which strand information should be used and assigned to the CffFusion object. Currently, the following is being used:
genomic_strand1 : genomic strand in gene 1 of fusion splice / breakpoint, retained sequence upstream on this strand, breakpoint is downstream
genomic_strand2 : genomic strand in gene 2 of fusion splice / breakpoint, retained sequence upstream on this strand, breakpoint is downstream

However, I believe instead, this should be used:
gene_strand1 : strand of gene 1
gene_strand2 : strand of gene 2

Source: [https://shahlab.ca/projects/defuse/]

The reason I believe this is because, for the above bug on October 11, 2018, both HES1 and IFNL1 are genes that are on the '+/f' strand, and using the genomic_strand1/genomic_strand2 incorrectly assigns them to the '+' and '-' strands, respectively. This results in incorrect information being contained in the final output file of the pipeline.
It also seems that both ericscript and integrate are incorrectly assigning genomic strand information. They are being assigned the wrong strand for IFNL1, despite having access to the correct strand information in the reference file (ens_known_genes.bed). 
-confused about strand assignment in ann_gene_order function in pygeneann.py. It is possible that it is being correctly assigned, but really seems like it isn't.


Problem :inconsistent gene naming convenctions by fusion callers. Results in fusions being miscategorized if fusioncallers assign names to genes which are not the "NCBI standard" as per the reference file human_g1k_v37_decoy.fasta. 

Speaking with Teja and Alper has led me to understand that changing the code/reference file in the fusion callers is not a reasonable solution. It is better to create a database of gene names, and generate a new output file with candidate fusions named according to their correct gene names. 

************
Oct 22, 2018
************

Goal: to ensure that fusion caller output gene names correspond to gene names in [ens_known_genes.bed] reference file.

Working directory: /Users/mapostolides/mugqic_tools-master/python-tools/fusiontools/0.1.0/bin/reann_cff_fusion_testing/convert_gene_names

Method: Read in initial [merged.cff] file, rename genes approrpiately, and write out a new .cff file with correct gene names.
 
Issues: 
-when attempting to rename genes names outputted by the fusion callers, the alias2Symbol function of the "limma" R package returns empty string when the queried gene doesn't exist anywhere in the database. For example, RP11-554D15.3 and RP11-146N23.1, which are pseudogenes, return an empty string. Using alias2SymbolTable instead results in NA being returned.

Since such pseudogenes ARE present in the .bed reference file ens_known_genes.bed, could check if a query gene is present in this file first, to avoid the complication of needing to run alias2SymbolTable for these genes. 

-Since the [reann_cff_fusion.py] fusiontool script uses code from [pygeneann.py] to load the entire [ens_known_genes.bed] reference file into a giant nested python object, this can be useful. Specifically, directly adjacent intervals (which correspond to genomic features, and are sub-components of genes) are combined into larger intervals which correspond to entire genes. This interval object is constructed dynamically as the step is running, and can be queried.

************
Oct 23, 2018
************

